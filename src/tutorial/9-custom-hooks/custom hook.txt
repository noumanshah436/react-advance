import { useState, useEffect, useCallback } from "react";

export const useFetch = (url) => {
	const [loading, setLoading] = useState(true);
	const [products, setProducts] = useState([]);
	console.log("inside usefectch custom hook");

	const getProducts = useCallback(async () => {
		const response = await fetch(url);
		const products = await response.json();

		console.log("before setproducts");
		setProducts(products);
		console.log("after setproducts");

		console.log("before setLoading");
		setLoading(false);
		console.log("after setLoading");
	}, [url]);

	useEffect(() => {
		console.log("UseEffect of custom hook");
		getProducts();
	}, [url, getProducts]);

	// 2nd parameter says that , useEffect will run whenever this hook(or function)
	// will invoke or whenever url is changes or
	// inside getProducts function useState setValue function is called

	//  when ever setProduct or setLoading is called
	// this hook(or function) will re-render( means return my object first )

	console.log("return from hook");
	return { loading, products };
};







**************************************************

with some changes

import { useState, useEffect, useCallback } from "react";

export const useFetch = (url) => {
	const [loading, setLoading] = useState(true);
	const [products, setProducts] = useState([]);
	console.log("inside usefectch custom hook");

	const getProducts = async () => {
		const response = await fetch(url);
		const products = await response.json();

		console.log("before setproducts");
		setProducts(products);
		console.log("after setproducts");

		console.log("before setLoading");
		setLoading(false);
		console.log("after setLoading");
	};

	useEffect(() => {
		console.log("UseEffect of custom hook");
		getProducts();
	}, [url]);

	// 2nd parameter says that , useEffect will run whenever this hook(or function)
	// will invoke or whenever url is changes or
	// inside getProducts function useState setValue function is called

	//  when ever setProduct or setLoading is called
	// this hook(or function) will re-render( means return my object first )

	console.log("return from hook");
	return { loading, products };
};
